from abc import ABCMeta, abstractmethod
from datetime import timedelta

from examples.cluster_grain_hello_world.messages.protos_pb2 import HelloRequest, HelloResponse
from protoactor.actor.actor import Actor, AbstractContext, RootContext, GlobalRootContext
from protoactor.actor.cancel_token import CancelToken
from protoactor.actor.messages import Started, ReceiveTimeout
from protoactor.actor.props import Props
from protoactor.remote.remote import Remote
from protoactor.remote.response import ResponseStatusCode
from protoactor.сluster.grain_call_options import GrainCallOptions
from protoactor.сluster.protos_pb2 import GrainRequest, GrainResponse, GrainErrorResponse
from protoactor.сluster.сluster import Cluster

{% for service in proto_file.services %}
class Abstract{{ service.name }}(metaclass=ABCMeta):
    {%- for method in service.methods %}
    @abstractmethod
    def {{ convert_to_snake_case(method.name) }}(self, request: {{ method.input_name }}) -> {{ method.output_name }}:
        raise NotImplementedError('Should implement this method')
    {%- endfor %}


class {{ service.name }}Client():
    def __init__(self, grain_id: str):
        self._grain_id = grain_id

    {% for method in service.methods %}
    async def {{ convert_to_snake_case(method.name) }}(self, request: {{ method.input_name }}, ct: CancelToken = None,
                        options: GrainCallOptions = None) -> {{ method.output_name }}:
        if options is None:
            options = GrainCallOptions()

        grain_request = GrainRequest(method_index=0,
                                     message_data=request.SerializeToString())

        async def inner() -> {{ method.output_name }}:
            # resolve the grain
            pid, status_code = await Cluster.get_async(self._grain_id, '{{ service.name }}', ct)
            if status_code != ResponseStatusCode.OK:
                raise Exception(f'Get PID failed with StatusCode: {status_code}')

            # request the RPC method to be invoked
            grain_response = await GlobalRootContext.request_future(pid, grain_request, ct)

            # did we get a response
            if isinstance(grain_response, GrainResponse):
                response = {{ method.output_name }}()
                response.ParseFromString(grain_response.message_data)
                return response

            # did we get an error response
            if isinstance(grain_response, GrainErrorResponse):
                raise Exception(grain_response.err)
            raise AttributeError()

        for i in range(options.retry_count):
            try:
                return await inner()
            except Exception:
                if options.retry_action is not None:
                    await options.retry_action(i)
        return await inner()
    {% endfor %}

class {{ service.name }}Actor(Actor):
    def __init__(self):
        self._inner = None

    async def receive(self, context: AbstractContext) -> None:
        message = context.message
        if isinstance(message, Started):
            self._inner = Grains._{{ convert_to_snake_case(service.name) }}_factory
            context.set_receive_timeout(timedelta(seconds=30))
        elif isinstance(message, ReceiveTimeout):
            await context.my_self.stop()
        elif isinstance(message, GrainRequest):
        {%- for method in service.methods %}
            if message.method_index == {{ method.index }}:
                request = {{ method.input_name }}()
                request.ParseFromString(message.message_data)
                try:
                    response = await self._inner.{{ convert_to_snake_case(method.name) }}(request)
                    grain_response = GrainResponse(message_data=response.SerializeToString())
                    await context.respond(grain_response)
                except Exception as ex:
                    grain_error_response = GrainErrorResponse(err=str(ex))
                    await context.respond(grain_error_response)
        {%- endfor %}
{% endfor %}

class Grains():
    def __init__(self):
    {%- for service in proto_file.services %}
        self._{{ convert_to_snake_case(service.name) }}_factory = None
    {%- endfor %}

    {% for service in proto_file.services -%}
    def {{ convert_to_snake_case(service.name) }}_factory(self, factory: Abstract{{ service.name }}) -> None:
        self._{{ convert_to_snake_case(service.name) }}_factory = factory
        Remote().register_known_kind('{{ service.name }}', Props().from_producer(lambda: {{ service.name }}Actor()))
    {%- endfor %}

    {% for service in proto_file.services -%}
    def {{ convert_to_snake_case(service.name) }}(self, grain_id: str) -> {{ service.name }}Client:
        return {{ service.name }}Client(grain_id)
    {%- endfor %}

Grains = Grains()




