# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import protos_remote_pb2 as protos__remote__pb2


class RemotingStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Receive = channel.stream_stream(
        '/remote.Remoting/Receive',
        request_serializer=protos__remote__pb2.MessageBatch.SerializeToString,
        response_deserializer=protos__remote__pb2.Unit.FromString,
        )


class RemotingServicer(object):

  def Receive(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RemotingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Receive': grpc.stream_stream_rpc_method_handler(
          servicer.Receive,
          request_deserializer=protos__remote__pb2.MessageBatch.FromString,
          response_serializer=protos__remote__pb2.Unit.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'remote.Remoting', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
